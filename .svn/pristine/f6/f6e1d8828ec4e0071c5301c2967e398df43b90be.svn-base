package biz.ucc;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static util.Util.fillContact;

import org.junit.BeforeClass;
import org.junit.Test;

import biz.ContactUcc;
import biz.exceptions.BusinessException;
import biz.objects.BusinessFactory;
import biz.objects.Company;
import biz.objects.Contact;
import config.AppConfig;
import mock.DataBaseMock;

public class ContactUccImplTest {

  
//  private static AppConfig appConfig;
  private static ContactUcc contactUcc;
  private static Contact contact;
  private static Company company;
//  private static Address address;
//  private static User creator;
//  private static int pkContact, pkCompany, pkAddress, pkCreator;
  
  @BeforeClass
  public static void setUpBeforeClass() throws Exception {
    AppConfig appConfig = new AppConfig(AppConfig.APP_MOCK_DAO);
    if(!appConfig.load())
      throw new Exception();
    contactUcc = (ContactUcc) appConfig.newInstanceOf(ContactUcc.class);
    
//    address = createAddress(appConfig);
//    pkAddress = address.getPk();
    
//    creator = createUser(appConfig);
//    pkCreator = creator.getPk();
    
//    company = createCompany(appConfig, address, creator);
//    pkCompany = company.getPk();

    DataBaseMock dataBaseMock = DataBaseMock.getInstance();
    
//    contact = createContact(appConfig, company);
    contact = (Contact) dataBaseMock.getContactDtoByPk(1);
    company = (Company) contact.getCompany();
//    pkContact = contact.getPk();
  }
  
//  @AfterClass
//  public static void tearDownAfterClass() throws Exception {
//    deleteTestRecord(appConfig);
//  }
  
//  @Before
//  public void setUp() throws Exception {
//    fillAddress(address, 12, COMMUNE, pkAddress, STREET, STREET_NUMBER, ZIP_CODE);
//    fillUser(creator, EMAIL, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, pkCreator);
//    fillCompany(company, address, COMPANY_NAME, creator, pkCompany);
//    fillContact(contact, company, EMAIL, FIRSTNAME, LASTNAME, PHONE, pkContact);
//  }

  @Test (expected = BusinessException.class)
  public void testCreateNewContact1() {
    contactUcc.createNewContact(contact);
  }
  
  @Test
  public void testCreateNewContact2() {
    contact.setEmail("");
    contactUcc.createNewContact(contact);
  }
  
  @Test
  public void testCreateNewContact3() {
    Contact contact = BusinessFactory.getContact();
    fillContact(contact, company, "test.test@test.be", "fir", "last", "1234", 1);
    contactUcc.createNewContact(contact);    
   }
  
  @Test
  public void testGetContactsForCompany1(){
    assertFalse(contactUcc.getContactsForCompany("Apple").isEmpty());
  }
  
  @Test
  public void testGetContactsForCompany2(){
    assertTrue(contactUcc.getContactsForCompany("Adbhb").isEmpty());
  }
  
  @Test
  public void testUpdate1(){
    assertNotNull(contactUcc.update(contact));
  }
  
  @Test (expected = BusinessException.class)
  public void testUpdate2(){
    Contact contact = BusinessFactory.getContact();
    fillContact(contact, company, "test.test@test.be", "fir", "last", "1234", 67);
    contactUcc.update(contact);
  }
  
  @Test
  public void testGetAllContact(){
    assertFalse(contactUcc.getAllContact().isEmpty());
  }
  
  @Test
  public void testGetContact1() {
    assertNotNull(contactUcc.getContact("Richard", "Watterson", "Apple"));
  }
  
  @Test
  public void testGetContact2() {
    assertNull(contactUcc.getContact("Richard", "Watterson", "Microsoft"));
  }

}
