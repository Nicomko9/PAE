package biz;

import java.time.LocalDateTime;

import biz.dto.CompanyDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import biz.objects.Company;
import dal.DalFrontEndServices;
import dal.dao.CompanyDao;
import ihm.utils.DataValidator;
import ihm.utils.Logger;

/**
 * Implementation of the Company's Use Case Controller.
 */
class CompanyUccImpl implements CompanyUcc {

  private DalFrontEndServices dal;

  private CompanyDao companyDao;

  CompanyUccImpl(DalFrontEndServices dal, CompanyDao companyDao) {
    this.dal = dal;
    this.companyDao = companyDao;
  }

  /**
   * Register a new company in the database.
   * 
   * @param companyDto {@link CompanyDto} to persist
   * @return a boolean to indicate whether it worked or not
   */
  @Override
  public boolean register(CompanyDto companyDto) {
    Logger.log("CompanyUccImpl", "createCompany", "Creating company");

    // Validation champs companyDto
    if (!DataValidator.validateString(companyDto.getCompanyName())
        || !DataValidator.validateString(companyDto.getAddress().getStreet())
        || !DataValidator.validateInt(companyDto.getAddress().getStreetNumber())
        || !DataValidator.validateInt(companyDto.getAddress().getZipCode())
        || !DataValidator.validateString(companyDto.getAddress().getCommune())
        || !DataValidator.validateInt(companyDto.getAddress().getBox())) {
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INCORRECT_INFORMATIONS);
    }

    if (null != this.companyDao.findByName(companyDto.getCompanyName())) {
      Logger.log("CompanyUccImpl", "register", companyDto.getCompanyName() + " already exists.");
      throw new BusinessException(ErrorsCode.BUSINESS_NAME_COMPANY_EXISTED);
    }

    Company company = (Company) companyDto;
    company.setInscriptionDate(LocalDateTime.now());

    try {
      this.dal.startTransaction();

      if (null == this.companyDao.create(company)) {
        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      }

      this.dal.commitTransaction();

      return true;
    } catch (Exception exc) {
      this.dal.rollbackTransaction();
      throw exc;
    }
  }

  /**
   * Update a company already present in the database.
   * 
   * @param companyDto {@link CompanyDto} to persist
   * @return the information of the company updated in the database
   */
  @Override
  public CompanyDto update(CompanyDto companyDto) {
    // TODO
    Logger.log("CompanyUccImpl", "updateCompany", "Updating company");
    return null;
  }

}
