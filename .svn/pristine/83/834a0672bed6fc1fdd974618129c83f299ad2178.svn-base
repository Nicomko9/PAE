package biz;

import biz.dto.CompanyDto;
import biz.dto.JeDto;
import biz.dto.ParticipationDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import biz.exceptions.FatalException;
import biz.objects.Company;
import biz.objects.Je;
import biz.objects.Participation;
import dal.DalFrontEndServices;
import dal.dao.CompanyDao;
import dal.dao.ParticipationDao;
import ihm.utils.Logger;
import java.util.ArrayList;
import java.util.List;

class ParticipationUccImpl implements ParticipationUcc {

  private DalFrontEndServices dal;

  private ParticipationDao participationDao;
  private CompanyDao companyDao;

  ParticipationUccImpl(DalFrontEndServices dal, ParticipationDao participationDao,
      CompanyDao companyDao) {
    this.dal = dal;
    this.participationDao = participationDao;
    this.companyDao = companyDao;
  }

  private ParticipationDto update(ParticipationDto participationDto) {

    Participation participation = (Participation) participationDto;
    participation.checkConstraints();

    try {
      this.dal.startTransaction();

      participationDto = this.participationDao.update(participation);
      //      if (null == participationDto) {
      //        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      //      }

      this.dal.commitTransaction();

      return participationDto;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();
      throw new FatalException();
    }
  }

  @Override
  public ParticipationDto invite(ParticipationDto participationDto) {

    if (!participationDto.getState().equals("invitée")) {
      Logger.log("ParticipationDaoImpl", "invite", "The state of the participation is incorrect",
          Logger.ERROR);
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }

    Participation participation = (Participation) participationDto;
    participation.checkConstraints();

    try {
      this.dal.startTransaction();

      participationDto = this.participationDao.create(participation);

      //      if (null == participationDto) {
      //        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      //      }

      this.dal.commitTransaction();

      return participationDto;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();
      throw new FatalException();
    }
  }

  @Override
  public List<ParticipationDto> inviteCompanies(List<ParticipationDto> participationsToInvite) {

    List<ParticipationDto> participationsInvited = new ArrayList<ParticipationDto>();

    for (ParticipationDto participationDto : participationsToInvite) {
      Participation participation = (Participation) participationDto;
      participation.checkConstraints();
    }

    if (participationsToInvite.stream().anyMatch(p -> !p.getState().equals("invitée"))) {
      Logger.log("ParticipationDaoImpl", "inviteCompanies", 
          "The state of a participation is incorrect", Logger.ERROR);
      throw new BusinessException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }

    try {

      this.dal.startTransaction();

      for (int idx = 0; idx < participationsToInvite.size(); idx++) {
        Participation participation = (Participation) participationsToInvite.get(idx);
        //        participation.checkConstraints();

        //        if (!participation.getState().equals("invitée")) {
        //          throw new BusinessErrorException(
        //        ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
        //        }
        ParticipationDto participationDto = this.participationDao.create(participation);
        //        if (null == participationDto) {
        //          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        //        }
        participationsInvited.add(participationDto);
      }

      this.dal.commitTransaction();

      return participationsInvited;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();
      throw new FatalException();
    }
  }

  @Override
  public ParticipationDto confirm(ParticipationDto participationDto) {

    Participation participation = (Participation) participationDto;
    participation.checkConstraints();

    if (!participation.confirm()) {
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }

    try {
      this.dal.startTransaction();

      participationDto = this.participationDao.update(participation);
      //      if (null == participationDto) {
      //        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      //      }

      Company company = (Company) participationDto.getCompany();
      company.setLastParticipationYear(participationDto.getJe().getDayYear());
      this.companyDao.update(company);

      participationDto = this.participationDao.update(participation);

      /*List<ContactDto> contacts = this.contactDao.findContactsForCompany(company.getPk());

      Presence presence = BusinessFactory.getPresence();
      presence.setCompany(company);
      presence.setParticipation((Participation) participationDto);

      for (ContactDto contactDto : contacts) {
        presence.setContact((Contact) contactDto);
        if (this.presenceDao.create(presence) == null) {
          throw new BusinessException(ErrorsCode.UNDEFINED_ERROR);
        }
      }*/

      this.dal.commitTransaction();

      return participationDto;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();
      throw new FatalException();
    }
  }

  @Override
  public ParticipationDto returnToInvite(ParticipationDto participationDto) {
    Participation participation = (Participation) participationDto;
    if (!participation.refuse()) {
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }
    return update(participationDto);
  }

  @Override
  public ParticipationDto refuse(ParticipationDto participationDto) {
    Participation participation = (Participation) participationDto;
    if (!participation.refuse()) {
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }
    return update(participationDto);
  }

  @Override
  public ParticipationDto invoice(ParticipationDto participationDto) {
    Participation participation = (Participation) participationDto;
    if (!participation.invoice()) {
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }
    return update(participationDto);
  }

  @Override
  public ParticipationDto pay(ParticipationDto participationDto) {
    Participation participation = (Participation) participationDto;
    if (!participation.pay()) {
      throw new BusinessErrorException(ErrorsCode.BUSINESS_INVALID_PARTICIPATION_STATE);
    }
    return update(participationDto);
  }

  @Override
  public ParticipationDto cancel(ParticipationDto participationDto) {
    Participation participation = (Participation) participationDto;
    participation.cancel();
    return update(participationDto);
  }

  @Override
  public List<ParticipationDto> getAllParticipationsOf(JeDto jeDto) {
    Je je = (Je) jeDto;
    je.checkConstraints();

    try {
      this.dal.startTransaction();

      List<ParticipationDto> participationsDto = participationDao.findByYear(je.getDayYear());

      this.dal.commitTransaction();

      return participationsDto;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();
      throw new FatalException();
    }
  }

  @Override
  public List<ParticipationDto> getAllParticipationsOf(CompanyDto companyDto) {
    Company company = (Company) companyDto;

    try {
      this.dal.startTransaction();

      List<ParticipationDto> participationsDto = participationDao
          .findByCompanyNumber(company.getPk());

      this.dal.commitTransaction();

      return participationsDto;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();
      throw new FatalException();
    }
  }


  public ParticipationDto rollback(ParticipationDto dto) {
    try {
      Participation participation = (Participation) dto;
      participation.rollback();

      this.participationDao.update(participation);

      this.dal.commitTransaction();
      return participation;
    } catch (Exception exception) {
      this.dal.rollbackTransaction();

      throw exception;
    }
  }

}
