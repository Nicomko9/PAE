package biz;

import java.util.List;

import biz.dto.CompanyDto;
import biz.dto.JeDto;
import biz.dto.ParticipationDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.ErrorsCode;
import biz.objects.Company;
import biz.objects.Je;
import biz.objects.Participation;
import dal.DalFrontEndServices;
import dal.dao.ParticipationDao;
import ihm.utils.Logger;

class ParticipationUccImpl implements ParticipationUcc {

  private DalFrontEndServices dal;

  private ParticipationDao participationDao;

  ParticipationUccImpl(DalFrontEndServices dal, ParticipationDao participationDao) {
    this.dal = dal;
    this.participationDao = participationDao;
  }

  private ParticipationDto update(ParticipationDto participationDto) {
    Participation participation = (Participation) participationDto;
    participation.checkConstraints();

    try {
      this.dal.startTransaction();

      participationDto = this.participationDao.create(participation);
      if (null == participationDto) {
        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      }

      this.dal.commitTransaction();

      return participationDto;
    } catch (Exception exc) {
      this.dal.rollbackTransaction();
      throw exc;
    }
  }

  @Override
  public ParticipationDto invite(ParticipationDto participationDto) {
    Logger.log("ParticipationUccImpl", "invite", "invite company to the JE");
    return update(participationDto);
  }

  @Override
  public ParticipationDto confirm(ParticipationDto participationDto) {
    Logger.log("ParticipationUccImpl", "confirm", "confirm the participation of the company");
    Participation participation = (Participation) participationDto;
    participation.confirm();
    return update(participationDto);
  }

  @Override
  public ParticipationDto refuse(ParticipationDto participationDto) {
    Logger.log("ParticipationUccImpl", "refuse", "refuse the participation of the company");
    Participation participation = (Participation) participationDto;
    participation.refuse();
    return update(participationDto);  }

  @Override
  public ParticipationDto invoice(ParticipationDto participationDto) {
    Logger.log("ParticipationUccImpl", "invoice", "invoice the company for its participation");
    Participation participation = (Participation) participationDto;
    participation.invoice();
    return update(participationDto);
  }

  @Override
  public ParticipationDto pay(ParticipationDto participationDto) {
    Logger.log("ParticipationUccImpl", "pay", "company pay its participation");
    Participation participation = (Participation) participationDto;
    participation.pay();
    return update(participationDto);
  }

  @Override
  public ParticipationDto cancel(ParticipationDto participationDto) {
    Logger.log("ParticipationUccImpl", "cancel", "cancel the participation of the company");
    Participation participation = (Participation) participationDto;
    participation.cancel();
    return update(participationDto);
  }

  @Override
  public List<ParticipationDto> getAllParticipationsOf(JeDto jeDto) {
    Je je = (Je) jeDto;
    je.checkConstraints();

    return participationDao.findByYear(je.getDayYear());
  }

  @Override
  public List<ParticipationDto> getAllParticipationsOf(CompanyDto companyDto) {
    Company company = (Company) companyDto;
    company.checkConstraints();
    
    return participationDao.findByCompanyNumber(company.getPk());
  }

}
