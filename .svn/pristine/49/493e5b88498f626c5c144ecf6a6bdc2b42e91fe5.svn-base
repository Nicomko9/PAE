package dal.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;

import biz.DtoFactory;
import biz.dto.AddressDto;
import biz.dto.CompanyDto;
import biz.dto.UserDto;
import biz.objects.Company;
import dal.DalBackEndServices;
import dal.dao.schema.CompanySchema;
import ihm.utils.Logger;

/**
 * Company's Data Access Object Class.
 */
class CompanyDaoImpl extends AbstractDao implements CompanyDao, CompanySchema {

  /**
   * Insert Company auto generated query.
   */
  @SuppressWarnings("unused")
  private static final String COMPANY_CREATE_QUERY =
      "INSERT INTO " + TABLE + " (" + String.join(",", FIELDS_MAP) + ") VALUES ("
          + String.join(",", Collections.nCopies(FIELDS_MAP.size(), "?")) + ")";

  /**
   * A compiled expression finding all fields from the table companies in database.
   */
  @SuppressWarnings("unused")
  private static final String COMPANY_FIND_QUERY =
      "SELECT " + String.join(",", FIELDS_MAP) + " FROM " + TABLE + " WHERE ";

  /**
   * Constructor.
   *
   * @param dal services provider
   * @param factory {@link DtoFactory} object
   */
  public CompanyDaoImpl(DalBackEndServices dal, DtoFactory factory) {
    super(dal, factory);
  }

  /**
   * Persists a company into the table companies in database.
   * 
   * @param company the {@link Company} to persist
   * @return the value of the {@link Company} catsed in {@link CompanyDto}
   */
  @Override
  public CompanyDto create(Company comp) {
    try {
      // TODO
      // PreparedStatement stmt = this.dal.prepareStatement(COMPANY_CREATE_QUERY);
      // 1) Create Address et récupérer sa PK
      // 2) Create Entreprise
      // stmt.setString(parameterIndex, x);
    } catch (Exception exce) {
      exce.printStackTrace();
      Logger.log("CompanyDaoImpl", "create",
          "registration of : " + comp.getCompanyName() + "failed : " + exce.getMessage());
    }
    return (CompanyDto) comp;
  }

  /**
   * Create an instance of DTO company based on result set.
   *
   * @param rs {@link ResultSet} coming directly from database
   * @return a {@link Company} object with the information of the {@link ResultSet}
   * @throws SQLException if an error occurs during result set access
   */
  @SuppressWarnings("unused")
  private Company populateDto(ResultSet rs) throws SQLException {
    Company company = (Company) this.factory.getCompany();

    company.setCompanyName(rs.getString(FIELD_COMPANY_NAME));
    company.setCreator((UserDto) rs.getObject(FIELD_COMPANY_CREATOR));
    company.setAddress((AddressDto) rs.getObject(FIELD_COMPANY_ADDRESS));
    company.setInscriptionDate(rs.getTimestamp(FIELD_COMPANY_INSCRIPTION_DATE).toLocalDateTime());
    company.setLastParticipationYear(rs.getInt(FIELD_COMPANY_LAST_PARTICIPATION));

    return company;
  }
}
