package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collections;

import biz.DtoFactory;
import biz.dto.AddressDto;
import biz.dto.CompanyDto;
import biz.dto.UserDto;
import biz.objects.Address;
import biz.objects.Company;
import biz.objects.User;
import dal.DalBackEndServices;
import dal.dao.schema.CompanySchema;
import ihm.utils.Logger;

/**
 * Company's Data Access Object Class.
 */
class CompanyDaoImpl extends AbstractDao implements CompanyDao, CompanySchema {

  /**
   * Insert Company auto generated query.
   */
  private static final String COMPANY_CREATE_QUERY =
      "INSERT INTO " + TABLE + " (" + String.join(",", FIELDS_MAP) + ") VALUES ("
          + String.join(",", Collections.nCopies(FIELDS_MAP.size(), "?")) + ")";

  /**
   * A compiled expression finding all fields from the table companies in database.
   */
  private static final String COMPANY_FIND_QUERY =
      "SELECT " + String.join(",", FIELDS_MAP) + " FROM " + TABLE + " WHERE ";

  /**
   * Constructor.
   *
   * @param dal services provider
   * @param factory {@link DtoFactory} object
   */
  public CompanyDaoImpl(DalBackEndServices dal, DtoFactory factory) {
    super(dal, factory);
  }

  /**
   * Find a single company based on a pk.
   * 
   * @param companyNumber the value to lookup
   * @return the {@link CompanyDto} instance found in the research
   */
  @Override
  public CompanyDto findByPk(int companyNumber) {
    return findBy(FIELD_COMPANY_PK, "" + companyNumber);
  }

  /**
   * Find a single company based on a name.
   * 
   * @param name the value to lookup
   * @return the {@link CompanyDto} instance found in the research
   */
  @Override
  public CompanyDto findByName(String name) {
    return findBy(FIELD_COMPANY_NAME, name);
  }

  /**
   * Persist a company into the table companies in database.
   * 
   * @param company the {@link Company} to persist
   * @return the value of the {@link Company} casted in {@link CompanyDto}
   */
  public CompanyDto create(Company company) {
    Logger.log("CompanyDaoImpl", "create", "Creating company");
    // String login = " ";
    // company.setCreator(((User) userDao.findByLogin(login)));

    try {
      PreparedStatement stmt = this.dal.prepareStatement(COMPANY_CREATE_QUERY);

      stmt.setString(1, company.getCompanyName());
      stmt.setInt(2, ((User) company.getCreator()).getPk());
      stmt.setInt(3, ((Address) company.getAddress()).getPk());
      stmt.setTimestamp(4, Timestamp.valueOf(company.getInscriptionDate()));
      stmt.setInt(5, company.getLastParticipationYear());

      Logger.log("CompanyDaoImpl", "create", "Company Saved");

      stmt.execute();

      return company;
    } catch (Exception exc) {
      exc.printStackTrace();
      Logger.log("CompanyDaoImpl", "create", "registration of : " + company.getCompanyName() + " failed : " + exc.getMessage());
      return null;
    }
  }

  /**
   * Update a company already present in the database.
   * 
   * @param company {@link Company} to persist
   * @return the new value of the {@link Company} casted in {@link CompanyDto}
   */
  @Override
  public CompanyDto update(Company company) {
    // TODO
    return null;
  }

  /**
   * Find a company based on a couple of key<->value.
   * 
   * @param key field to lookup
   * @param value value to match
   * @return the {@link CompanyDto} instance found in the research
   */
  private CompanyDto findBy(String key, String value) {
    CompanyDto company;

    if (!FIELDS_MAP.contains(key)) {
      throw new IllegalArgumentException("You cannot lookup company based on " + key);
    }

    try {
      PreparedStatement stmt = this.dal.prepareStatement(COMPANY_FIND_QUERY + key + " = ?");

      stmt.setString(1, value);
      ResultSet rs = stmt.executeQuery();

      if (!rs.next()) {
        rs.close();
        return null;
      }

      company = populateDto(rs);

    } catch (SQLException sqle) {
      Logger.log("CompanyDaoImpl", "findBy", sqle.getMessage());
      throw new IllegalArgumentException(
          "Error querying company : " + COMPANY_FIND_QUERY + key + " = ?");
    }

    return company;
  }

  /**
   * Create an instance of DTO company based on result set.
   *
   * @param rs {@link ResultSet} coming directly from database
   * @return a {@link Company} object with the information of the {@link ResultSet}
   * @throws SQLException if an error occurs during result set access
   */
  private Company populateDto(ResultSet rs) throws SQLException {
    Company company = (Company) this.factory.getCompany();

    company.setCompanyName(rs.getString(FIELD_COMPANY_NAME));
    company.setCreator((UserDto) rs.getObject(FIELD_COMPANY_CREATOR));
    company.setAddress((AddressDto) rs.getObject(FIELD_COMPANY_ADDRESS));
    company.setInscriptionDate(rs.getTimestamp(FIELD_COMPANY_INSCRIPTION_DATE).toLocalDateTime());
    company.setLastParticipationYear(rs.getInt(FIELD_COMPANY_LAST_PARTICIPATION));

    return company;
  }
}
