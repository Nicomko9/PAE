package biz;

import biz.dto.AddressDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import biz.objects.Address;
import dal.DalFrontEndServices;
import dal.dao.AddressDao;
import ihm.utils.DataValidator;
import ihm.utils.Logger;

/**
 * Implementation of the Address' Use Case Controller.
 */
class AddressUccImpl implements AddressUcc {

  private DalFrontEndServices dal;

  private AddressDao addressDao;

  AddressUccImpl(DalFrontEndServices dal, AddressDao addressDao) {
    this.dal = dal;
    this.addressDao = addressDao;
  }

  /**
   * Register a new address in the database.
   *
   * @param biz {@link AddressDto} to persist
   * @return a boolean to indicate whether it worked or not
   */
  @Override
  public boolean register(AddressDto addressDto) {
    Logger.log("AddressUccImpl", "createAddress", "Creating address");

    Address address = (Address) addressDto;
    address.checkConstraints();
    
    try {
      this.dal.startTransaction();

      if (null == this.addressDao.create(address)) {
        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      }

      this.dal.commitTransaction();

      return true;
    } catch (Exception exc) {
      this.dal.rollbackTransaction();
      throw exc;
    }
  }

  /**
   * Get an Address by its street, street number, zip code and commune.
   *
   * @param street of the Address
   * @param streetNumber of the Address
   * @param zipCode of the Address
   * @param commune of the Address
   * @return {@link AddressDto} that fits the good parameters
   */
  public AddressDto getAddress(String street, int streetNumber, int zipCode, String commune) {
    if (!DataValidator.validateString(street)) {
      throw new BusinessException(ErrorsCode.HTTP_ERROR_BAD_REQUEST);
    }
    if (!DataValidator.validateInt(streetNumber)) {
      throw new BusinessException(ErrorsCode.HTTP_ERROR_BAD_REQUEST);
    }
    if (!DataValidator.validateInt(zipCode)) {
      throw new BusinessException(ErrorsCode.HTTP_ERROR_BAD_REQUEST);
    }
    if (!DataValidator.validateString(commune)) {
      throw new BusinessException(ErrorsCode.HTTP_ERROR_BAD_REQUEST);
    }

    return this.addressDao.findAddress(street, streetNumber, zipCode, commune);
  }

}
