package dal.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import biz.DtoFactory;
import biz.dto.CompanyDto;
import biz.exceptions.BusinessException;
import biz.objects.Address;
import biz.objects.Company;
import dal.DalBackEndServices;
import dal.dao.schema.AddressSchema;
import dal.dao.schema.CompanySchema;
import ihm.utils.Logger;

/**
 * Company's Data Access Object Class.
 */
class CompanyDaoImpl extends AbstractDao implements CompanyDao, CompanySchema {

  /**
   * Insert Company auto generated query.
   */
  private static final String COMPANY_CREATE_QUERY =
      "INSERT INTO " + TABLE + " (" + String.join(",", FIELDS_MAP) + ") VALUES ("
          + String.join(",", Collections.nCopies(FIELDS_MAP.size(), "?")) + ") RETURNING *";

  /**
   * A compiled expression finding all fields from the table companies in database.
   */
  private static final String COMPANY_FIND_QUERY = "SELECT * FROM " + TABLE + " WHERE ";

  private static final String COMPANY_FIND_ALL_QUERY = "SELECT * FROM " + TABLE;

  /**
   * Update Company auto generated query.
   */
  private static final String COMPANY_UPDATE_QUERY =
      "UPDATE " + TABLE + " SET (" + String.join(",", FIELDS_MAP_UPDATE) + ") = ("
          + String.join(",", Collections.nCopies(FIELDS_MAP_UPDATE.size(), "?")) + ") WHERE "
          + FIELD_COMPANY_PK + " = ? AND " + FIELD_VERSION + " = ? RETURNING *";

  private AddressDao addressDao;
  private UserDao userDao;

  /**
   * Constructor.
   *
   * @param dal services provider
   * @param factory {@link DtoFactory} object
   */
  public CompanyDaoImpl(DalBackEndServices dal, DtoFactory factory, AddressDao addressDao,
      UserDao userDao) {
    super(dal, factory);
    this.addressDao = addressDao;
    this.userDao = userDao;
  }

  /**
   * Find a single company based on a pk.
   *
   * @param pk the value to lookup
   * @return the {@link CompanyDto} instance found in the research
   */
  @Override
  public CompanyDto findByPk(int pk) {
    Logger.log("CompanyDaoImpl", "findByPk", "Searching");
    return findBy(FIELD_COMPANY_PK, "" + pk);
  }

  /**
   * Find a single company based on a name.
   *
   * @param name the value to lookup
   * @return the {@link Company} instance found in the research
   */
  @Override
  public CompanyDto findByName(String name) {
    Company comp;

    if ("".equals(name)) {
      return null;
    }

    try {
      PreparedStatement stmt =
          this.dal.prepareStatement(COMPANY_FIND_QUERY + FIELD_COMPANY_NAME + " = ?");

      stmt.setString(1, name);
      ResultSet rs = stmt.executeQuery();

      if (!rs.next()) {
        rs.close();
        return null;
      }

      comp = populateDto(rs, true);
      // comp.setPk((Integer) rs.getObject(FIELD_COMPANY_PK));
      rs.close();
      //
      return comp;
    } catch (SQLException sqle) {
      Logger.log("CompanyDaoImpl", "findByName", sqle.getMessage());
      throw new IllegalArgumentException(
          "Error querying company : " + COMPANY_FIND_QUERY + FIELD_COMPANY_NAME + " = ?");
    }
  }

  /**
   * Persist a company into the table companies in database.
   *
   * @param company the {@link Company} to persist
   * @return the value of the {@link Company} casted in {@link CompanyDto}
   */
  @Override
  public CompanyDto create(Company company) {
    Logger.log("CompanyDaoImpl", "create", "Creating company");

    try {
      PreparedStatement stmt = this.dal.prepareStatement(COMPANY_CREATE_QUERY);

      stmt.setString(1, company.getCompanyName());
      stmt.setInt(2, company.getCreator().getPk());
      stmt.setInt(3, company.getAddress().getPk());
      stmt.setTimestamp(4, Timestamp.valueOf(company.getInscriptionDate()));
      stmt.setInt(5, company.getLastParticipationYear());
      stmt.setInt(6, 1);

      Logger.log("CompanyDaoImpl", "create", "Company Saved");
      ResultSet rs = stmt.executeQuery();

      if (!rs.next()) {
        rs.close();
        return null;
      }

      company = populateDto(rs, true);

      rs.close();
      return company;
    } catch (Exception exc) {
      exc.printStackTrace();
      Logger.log("CompanyDaoImpl", "create",
          "registration of : " + company.getCompanyName() + " failed : " + exc.getMessage());
      return null;
    }
  }

  /**
   * Update a company already present in the database.
   *
   * @param company {@link Company} to persist
   * @return the new value of the {@link Company} casted in {@link CompanyDto}
   */
  @Override
  public CompanyDto update(Company company) {
    Logger.log("CompanyDaoImpl", "update", "Updating company");
    try {
      PreparedStatement stmt = this.dal.prepareStatement(COMPANY_UPDATE_QUERY);
      stmt.setString(1, company.getCompanyName());
      stmt.setInt(2, company.getLastParticipationYear());
      stmt.setInt(3, company.getVersion() + 1);
      stmt.setInt(4, company.getPk());
      stmt.setInt(5, company.getVersion());

      ResultSet rs = stmt.executeQuery();

      if (!rs.next()) {
        rs.close();
        return null;
      }

      Company com = populateDto(rs, false);
      com.setAddress((Address) company.getAddress());

      Logger.log("CompanyDaoImpl", "update", "Company Saved");

      return com;
    } catch (BusinessException exc) {
      Logger.log("CompanyDaoImpl", "update", "Failed : " + exc.getErrorCode());
      throw exc;
    } catch (Exception exc) {
      Logger.log("CompanyDaoImpl", "update", "Failed : " + exc.getMessage());
      return null;
    }
  }

  /**
   * Find a company based on a couple of key<->value.
   *
   * @param key field to lookup
   * @param value value to match
   * @return the {@link CompanyDto} instance found in the research
   */
  private CompanyDto findBy(String key, Object value) {
    CompanyDto company;
    boolean pk = false;

    if (value == null) {
      return null;
    }

    if (key.equals(FIELD_COMPANY_PK)) {
      pk = true;
    }

    if (!pk && !FIELDS_MAP.contains(key)) {
      throw new IllegalArgumentException("You cannot lookup company based on " + key);
    }

    try {
      PreparedStatement stmt = this.dal.prepareStatement(COMPANY_FIND_QUERY + key + " = ?");

      if (!pk) {
        stmt.setString(1, (String) value);
      } else {
        stmt.setInt(1, Integer.parseInt((String) value));
      }

      ResultSet rs = stmt.executeQuery();

      if (!rs.next()) {
        rs.close();
        return null;
      }

      company = populateDto(rs, true);
      rs.close();
      return company;
    } catch (SQLException sqle) {
      Logger.log("CompanyDaoImpl", "findBy", sqle.getMessage());
      throw new IllegalArgumentException(
          "Error querying company : " + COMPANY_FIND_QUERY + key + " = " + value);
    }
  }

  /**
   * Create an instance of DTO company based on result set.
   *
   * @param rs {@link ResultSet} coming directly from database
   * @param withFk if it is true, the method search for all fk, its object
   * @return a {@link Company} object with the information of the {@link ResultSet}
   * @throws SQLException if an error occurs during result set access
   */
  private Company populateDto(ResultSet rs, boolean withFk) throws SQLException {
    Company company = (Company) this.factory.getCompany();

    if (withFk) {
      //      User user = (User) userDao.findByPk(rs.getInt(FIELD_COMPANY_CREATOR));
      //      Logger.log("CompanyDaoImpl", "populate", "user fait");
      //      company.setCreator(user);
      Address add = (Address) addressDao.findByPk(rs.getInt(FIELD_COMPANY_ADDRESS));
      //      Logger.log("CompanyDaoImpl", "populate", "address fait");
      company.setAddress(add);
    }

    company.setPk(rs.getInt(FIELD_COMPANY_PK));
    company.setCompanyName(rs.getString(FIELD_COMPANY_NAME));
    company.setInscriptionDate(rs.getTimestamp(FIELD_COMPANY_INSCRIPTION_DATE).toLocalDateTime());
    company.setLastParticipationYear(rs.getInt(FIELD_COMPANY_LAST_PARTICIPATION));
    company.setVersion(rs.getInt(FIELD_VERSION));

    return company;
  }

  /**
   * Get All the Companies.
   *
   * @return {@link List} of {@link CompanyDto}
   */
  @Override
  public List<CompanyDto> findAllCompanies() {
    List<CompanyDto> allComp = new ArrayList<CompanyDto>();
    try {
      PreparedStatement ps =
          this.dal.prepareStatement(COMPANY_FIND_ALL_QUERY + " ORDER BY " + FIELD_COMPANY_NAME);
      ResultSet rs = ps.executeQuery();

      while (rs.next()) {
        allComp.add(populateDto(rs, true));
      }
      rs.close();

    } catch (SQLException exception) {
      Logger.log("CompanyDaoImpl", "findAllCompanie", exception.getMessage());
      throw new IllegalArgumentException("Error Querying Companies : " + COMPANY_FIND_ALL_QUERY);
    }
    return allComp;
  }

  /**
   * Find all company for the selection.
   *
   * @return {@link List} of {@link CompanyDto}
   */
  @Override
  public List<CompanyDto> findAllNewCompanies() {
    List<CompanyDto> companies = new ArrayList<>();
    try {
      PreparedStatement stmt =
          this.dal.prepareStatement(COMPANY_FIND_QUERY + "((DATE_PART('year',current_date)-"
              + "DATE_PART('year'," + FIELD_COMPANY_INSCRIPTION_DATE + ")) * 12 + "
              + "(DATE_PART('month',current_date)-DATE_PART('month',"
              + FIELD_COMPANY_INSCRIPTION_DATE + "))) <= 12");

      ResultSet rs = stmt.executeQuery();

      while (rs.next()) {
        companies.add(populateDto(rs, true));
      }
      rs.close();

    } catch (SQLException sqle) {
      Logger.log("CompanyDaoImpl", "findAllNewCompanies", sqle.getMessage());
    }
    return companies;
  }

  @Override
  public Set<CompanyDto> search(String[] criteria) {
    Set<CompanyDto> companies = new HashSet<>();

    try {
      String statement = COMPANY_FIND_ALL_QUERY + " comp, " + AddressSchema.TABLE
          + " add WHERE comp." + FIELD_COMPANY_ADDRESS + "= add."
          + AddressSchema.FIELD_ADDRESS_PK + " AND (";

      List<String> list = new ArrayList<>();

      for (String data : criteria) {
        System.out.println("Searching with " + data);

        if (data.isEmpty()) {
          continue;
        }

        statement += "(LOWER(comp." + FIELD_COMPANY_NAME + ") LIKE ? OR LOWER(add."
            + AddressSchema.FIELD_ADDRESS_STREET + ") LIKE ? OR LOWER("
            + AddressSchema.FIELD_ADDRESS_COMMUNE + ") LIKE ?) AND ";

        list.add(data.toLowerCase());
        list.add(data.toLowerCase());
        list.add(data.toLowerCase());
      }

      statement = statement.substring(0, (statement.length() - 5)) + ")";

      PreparedStatement stmt = this.dal.prepareStatement(statement);

      int index = 0;
      for (String attr : list) {
        stmt.setString(++index, "%" + attr + "%");
      }

      ResultSet rs = stmt.executeQuery();
      while (rs.next()) {
        companies.add(populateDto(rs, true));
      }

      rs.close();
    } catch (SQLException sqle) {
      Logger.log("CompanyDaoImpl", "search", sqle.getMessage());
    }
    return companies;
  }
}


