package biz.ucc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static util.Util.COMMUNE;
import static util.Util.COMPANY_NAME;
import static util.Util.EMAIL;
import static util.Util.FIRSTNAME;
import static util.Util.LASTNAME;
import static util.Util.LOGIN;
import static util.Util.PASSWORD;
import static util.Util.STREET;
import static util.Util.STREET_NUMBER;
import static util.Util.ZIP_CODE;
import static util.Util.createAddress;
import static util.Util.createCompany;
import static util.Util.createUser;
import static util.Util.deleteTestRecord;
import static util.Util.fillAddress;
import static util.Util.fillCompany;
import static util.Util.fillUser;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import biz.CompanyUcc;
import biz.exceptions.BusinessException;
import biz.objects.Address;
import biz.objects.Company;
import biz.objects.User;
import config.AppConfig;

public class CompanyUccImplTest {

  private static AppConfig appConfig;
  private static CompanyUcc companyUcc;
  private static Company company;
  private static Address address;
  private static User creator;
  private static int pkCompany, pkAddress, pkCreator;
  
  @BeforeClass
  public static void setUpBeforeClass() throws Exception {
    appConfig = new AppConfig(AppConfig.APP_DEV);
    if(!appConfig.load())
      throw new Exception();
    companyUcc = (CompanyUcc) appConfig.newInstanceOf(CompanyUcc.class);
    
    address = createAddress(appConfig);
    pkAddress = address.getPk();
    
    creator = createUser(appConfig);
    pkCreator = creator.getPk();
    
    company = createCompany(appConfig, address, creator);
    pkCompany = company.getPk();
  }
  
  @AfterClass
  public static void tearDownAfterClass() throws Exception {
    deleteTestRecord(appConfig);
  }
  
  @Before
  public void setUp() throws Exception {
    fillAddress(address, 12, COMMUNE, pkAddress, STREET, STREET_NUMBER, ZIP_CODE);
    fillUser(creator, EMAIL, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, pkCreator);
    fillCompany(company, address, COMPANY_NAME, creator, pkCompany);
  }

  @Test (expected = BusinessException.class)
  public void testRegister1() {
    companyUcc.register(company);
  }
  
  @Test (expected = BusinessException.class)
  public void testRegister2() {
    company.setCompanyName("");
    companyUcc.register(company);
  }
  
  @Test (expected = BusinessException.class)
  public void testRegister3() {
    company.setAddress(null);
    companyUcc.register(company);
  }

  @Test
  public void testRegister4() {
    company.setCompanyName("name_junit");
    companyUcc.register(company);
  }
  
  @Test
  public void testUpdate() {
    
  }

  @Test
  public void testGetAllCompanies() {
    assertFalse(companyUcc.getAllCompanies().isEmpty());
  }
  
  @Test
  public void testGetCompanyByName1(){
    assertNull("company doesn' exist",companyUcc.getCompanyByName("andiaef"));
  }
  
  @Test
  public void testGetCompanyByName2(){
    assertEquals(COMPANY_NAME,companyUcc.getCompanyByName(COMPANY_NAME).getCompanyName());
  }

}
