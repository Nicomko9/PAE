import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.DefaultServlet;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.webapp.WebAppContext;

import config.AppConfig;
import ihm.ApplicationServlet;
import ihm.utils.Logger;

/**
 * Scripts de démarrage de l'application.
 */
public class Main {

  private AppConfig appConfig;

  /**
   * Constructeur du main.
   *
   * @param state l'état de base : APP_DEV ou APP_PROD
   * @throws Exception si les configurations ne sont pas correctement chargées
   */
  private Main(String state) throws Exception {
    AppConfig app = new AppConfig(state);

    if (!app.load()) {
      Logger.log("global", "main", "Unable to load app configuration !");

      throw new Exception("Internal error !");
    }

    this.appConfig = app;
  }

  /**
   * Point d'entrée de l'application principale.
   * 
   * @param args Liste des arguments donnés lors du lancement de le l'application
   */
  public static void main(String[] args) {
    try {
      Logger.log("global", "main", "Script startup");
      Main app = new Main(AppConfig.APP_DEV);

      if (!app.startJetty()) {
        Logger.log("global", "main", "Server failed starting");
      } else {
        Logger.log("global", "main", "Server started");
      }
    } catch (Exception exception) {
      System.out.println("Uncaught exception");
      exception.printStackTrace();
    }
  }

  /**
   * Démarre une nouvelle instance jetty
   * Note : les configurations de jetty peuvent etre override dans le fichier .properties lancé
   *
   * @return true si le serveur a correctement démarre
   */
  private boolean startJetty() {
    try {
      Server server;
      WebAppContext context;

      server = new Server(Integer.parseInt(AppConfig.getProperty("server.port", "8000")));
      context = new WebAppContext();
      server.setHandler(context);

      context.setContextPath(AppConfig.getProperty("server.path", "/"));
      context.setWelcomeFiles(new String[]{"index.html"});
      context.setResourceBase(AppConfig.getProperty("server.resources", "web"));
      context.addServlet(
          new ServletHolder(appConfig.getClassForName(ApplicationServlet.class)),
          "/app/*");
      context.addServlet(new ServletHolder(new DefaultServlet()), "/");
      context.setInitParameter("cacheControl", "no-store, no-cache, must-revalidate");

      server.start();

      return true;
    } catch (Exception exception) {
      System.out.println("Internel system error - unable to start server: exiting application");
      exception.printStackTrace();

      return false;
    }
  }

}
