package biz;

import biz.dto.ContactDto;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import biz.objects.Contact;
import dal.DalFrontEndServices;
import dal.dao.ContactDao;
import ihm.utils.DataValidator;
import ihm.utils.Logger;
import java.sql.SQLException;
import java.util.List;

/**
 * Implementation of the Contact's Use Case Controller.
 */
class ContactUccImpl implements ContactUcc {

  private DalFrontEndServices dal;

  private ContactDao contactDao;

  ContactUccImpl(DalFrontEndServices dal, ContactDao contactDao) {
    this.dal = dal;
    this.contactDao = contactDao;
  }

  /**
   * Persists a contact.
   *
   * @param contactDto to persists.
   * @return <code>true</code> if the {@link ContactDto} has been set in the Database.
   */
  public boolean createNewContact(ContactDto contactDto) {
    Logger.log("ContactUccImpl", "createNewContact", "Creating contact");
    try {
      this.dal.startTransaction();
      Contact contact = (Contact) contactDto;
      if (!DataValidator.validateString(contactDto.getFirstname())
          || !DataValidator.validateString(contactDto.getLastname())
          // || !DataValidator.validateString(contactDto.getEmail())
          // || !DataValidator.validateString(contactDto.getPhone())
          || !DataValidator.validateString(contactDto.getCompany().getCompanyName())) {
        throw new BusinessException(ErrorsCode.BUSINESS_INVALID_CONTACT);
      }
      /* if (null != this.contactDao.findByPk(contact.getPk())) {
        Logger.log("JeUccImpl", "createNewJe", "another contact already exists for this ID");
        throw new BusinessException(ErrorsCode.BUSINESS_ALREADY_CONTACT_FOR_ID);
      } */
      contact.prepareForInsert();
      this.contactDao.create(contact);
      this.dal.commitTransaction();
      return true;
    } catch (BusinessException exception) {
      Logger.log("ContactUccImpl", "createNewContact",
          "Error inserting contact : " + exception.getErrorCode());
      throw exception;
    } catch (Exception exception) {
      Logger.log("ContactUccImpl", "createNewContact",
          "Error inserting contact : " + exception.getMessage());
      this.dal.rollbackTransaction();

      throw new BusinessException(ErrorsCode.UNDEFINED_ERROR);
    }
  }

  /**
   * Get All the contacts.
   *
   * @return {@link List} of {@link ContactDto}
   * @throws IllegalArgumentException if there's an error with the query
   */
  public List<ContactDto> getAllContact() {
    try {
      Logger.log("ContactUccImp", "getAllContact", "Finding");
      return this.contactDao.findAllContacts();
    } catch (SQLException exception) {
      Logger.log("ContactUccImpl", "getAllContact", "Error querying contacts");
      throw new IllegalArgumentException(exception.getMessage());
    }
  }

  /**
   * Get All the contacts for the given company name.
   *
   * @return {@link List} of {@link ContactDto}
   * @throws IllegalArgumentException if there's an error with the query
   */
  public List<ContactDto> getContactsForCompany(String name) {
    try {
      if (!DataValidator.validateString(name)) {
        throw new BusinessException(ErrorsCode.BUSINESS_INVALID_COMPANY_NAME);
      }
      return this.contactDao.findContactsForCompany(name);
    } catch (SQLException exception) {
      Logger.log("ContactUccImpl", "getContactsForCompany", "Error querying contacts");
      throw new IllegalArgumentException(exception.getMessage());
    }
  }

  /**
   * Update a contact already present in the database.
   *
   * @param contactDto {@link ContactDto} to persist
   * @return the information of the contact updated in the database
   */
  public ContactDto update(ContactDto contactDto) {
    // TODO
    Logger.log("ContactUccImpl", "update", "Updating contact");
    return null;
  }
}
