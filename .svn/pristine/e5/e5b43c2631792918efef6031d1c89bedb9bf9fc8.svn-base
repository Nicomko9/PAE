package biz.objects;

import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import biz.dto.CompanyDto;
import biz.exceptions.BusinessException;

/**
 * JE's business object.
 */
class JeBiz extends BizObject implements Je {

  /**
   * JE's company list.
   */
  private List<Company> companies = new ArrayList<>();

  /**
   * JE's contact list.
   */
  private List<Contact> contacts = new ArrayList<>();

  /**
   * JE's Day Date. Format : YYYY-MM-DD
   */
  private LocalDate dayDate;

  /**
   * JE's Day Year.
   */
  private int dayYear;

  JeBiz() {}

  /*
   * Getters & Setters
   */

  @SuppressWarnings("deprecation")
  public void setDate(Timestamp date) {
    this.dayDate = date.toLocalDateTime().toLocalDate();
    this.dayYear = date.getYear() + 1900;

    if (this.dayDate.getMonthValue() > 8 && this.dayDate.getMonthValue() < 12) {
      this.dayYear++;
    }
  }

  public void setDate(String date) throws ParseException {
    SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    this.setDate(Timestamp.from(format.parse(date).toInstant()));
  }

  public boolean addCompany(Company company) {
    if (companies.contains(company)){
      return false;
    }
    return companies.add(company);
  }

  public Map<CompanyDto, List<Contact>> getContactsByCompany() {
    return contacts.stream().collect(Collectors.groupingBy(Contact::getCompany));
  }

  public List<Company> getCompanies() {
    return this.companies;
  }

  public boolean addContact(Contact contact) {
    if (contacts.contains(contact)){
      return false;
    }
    if (!companies.contains((Company) contact.getCompany())){
      companies.add((Company) contact.getCompany());
    }
    return contacts.add(contact);
  }

  public List<Contact> getContacts() {
    return this.contacts;
  }

  public LocalDate getDayDate() {
    return this.dayDate;
  }

  public void setDayDate(Timestamp date) {
    this.dayDate = date.toLocalDateTime().toLocalDate();
  }

  public void setDayDate(LocalDate dayDate) {
    this.dayDate = dayDate;
  }

  public int getDayYear() {
    return this.dayYear;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + dayYear;
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj){
      return true;
    }
    if (obj == null){
      return false;
    }
    if (getClass() != obj.getClass()){
      return false;
    }
    JeBiz other = (JeBiz) obj;
    if (dayYear != other.dayYear){
      return false;
    }
    return true;
  }

  /**
   * Prepare the {@link Je} to be insert in the database.
   */
  public void prepareForInsert() throws BusinessException {
    this.checkConstraints();
  }

  /**
   * Check some Constraints.
   *
   * @throws BusinessException if of no respect of the constraints.
   */
  public void checkConstraints() throws BusinessException {
    // Autres v√©rifications style taille des champs etc
  }

}
