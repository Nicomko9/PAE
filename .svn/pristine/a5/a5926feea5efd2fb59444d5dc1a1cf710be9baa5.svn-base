package ihm;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import biz.AddressUcc;
import biz.CompanyUcc;
import biz.ContactUcc;
import biz.DtoFactory;
import biz.JeUcc;
import biz.UserUcc;
import biz.dto.AddressDto;
import biz.dto.CompanyDto;
import biz.dto.ContactDto;
import biz.dto.JeDto;
import biz.dto.UserDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import ihm.utils.Logger;
import ihm.utils.ServletUtil;


/**
 * Unique Servlet of the application.
 */
public class ApplicationServlet extends HttpServlet {


  private static final long serialVersionUID = 1L;

  /**
   * Json encoding / decoding by shared service.
   */
  private transient ServletUtil servletUtil;

  /**
   * User's session utility.
   */
  private transient SessionManager userSessions;

  /**
   * Resources loader.
   */
  private transient ResourcesLoader resourcesLoader;

  /**
   * Main template loader.
   */
  private transient TemplateLoader templateLoader;

  /**
   * Business object's factory.
   */
  private DtoFactory dtoFactory;

  /**
   * User Use-Case Controller.
   */
  private UserUcc userUcc;

  /**
   * Je Use-Case Controller.
   */
  private JeUcc jeUcc;

  /**
   * Address Use-Case Controller.
   */
  private AddressUcc addressUcc;

  /**
   * Company Use-Case Controller.
   */
  private CompanyUcc companyUcc;

  /**
   * Contact Use-Case Controller.
   */
  private ContactUcc contactUcc;

  /**
   * Construct the servlet.
   *
   * @param dtoFactory Business Object's factory
   * @param userSessions Manager of user's session
   * @param servletUtil Service encoding / decoding JSON and filling DTO's
   * @param userUcc User Use-Case Controller
   * @param jeUcc Je USe-Case Controller
   * @param addressUcc Address Use-Case Controller
   * @param companyUcc Company Use-Case Controller
   * @param contactUcc Contact Use-Case Controller
   */
  ApplicationServlet(DtoFactory dtoFactory, SessionManager userSessions, ServletUtil servletUtil,
      ResourcesLoader resourcesLoader, TemplateLoader templateLoader, UserUcc userUcc,
      JeUcc jeUcc, AddressUcc addressUcc, CompanyUcc companyUcc, ContactUcc contactUcc) {
    this.dtoFactory = dtoFactory;
    this.userSessions = userSessions;
    this.servletUtil = servletUtil;

    this.resourcesLoader = resourcesLoader;
    this.templateLoader = templateLoader;

    this.userUcc = userUcc;
    this.jeUcc = jeUcc;
    this.addressUcc = addressUcc;
    this.companyUcc = companyUcc;
    this.contactUcc = contactUcc;
  }

  /**
   * Handle the POST Http request.
   *
   * @param req request object
   * @param resp response object
   * @throws BusinessException Already connected
   * @throws BusinessException Internal JSON decoding error
   */

  @SuppressWarnings("unchecked")
  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws BusinessException {
    UserDto userDto;
    UserDto connectedUser = userSessions.readSession(req);
    ServletUtil servletUtil = new ServletUtil();

    switch (req.getPathInfo()) {
      case "/connection":
        Logger.log("ApplicationServlet", "doPost", "Connection");
        if (null != connectedUser) {
          throw new BusinessException(ErrorsCode.BUSINESS_USER_ALREADY_LOGGED_IN);
        }
        userDto = this.userUcc.connect(req.getParameter("login"), req.getParameter("password"));
        this.handleResponse(resp, userSessions.createSession(req, resp, userDto));
        return;

      case "/signup":
        Logger.log("ApplicationServlet", "doPost", "Sign up");
        try {
          Map<String, Object> requestMap =
              (Map<String, Object>) servletUtil.decode(req.getParameter("json"), Map.class);
          if (null == requestMap) {
            throw new BusinessException(ErrorsCode.BUSINESS_ERROR_DECODING_JSON);
          }
          userDto = servletUtil.fillUserDto(this.dtoFactory.getUser(), requestMap);
        } catch (Exception exc) {
          System.out.println(exc.getMessage());
          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        }
        if (this.userUcc.subscribe(userDto)) {
          this.handleResponse(resp, userSessions.createSession(req, resp, userDto));
        }
        return;

      case "/disconnect":
        Logger.log("ApplicationServlet", "doPost", "Disconnect");
        userSessions.deleteSession(req, resp);
        this.handleResponse(resp, true);
        return;
      default:
        break;
    }

    checkConnection(req, connectedUser);

    switch (req.getPathInfo()) {
      case "/auth":
        this.handleResponse(resp, connectedUser);
        return;
      case "/je":
        int year;
        try {
          year = Integer.parseInt(req.getParameter("year"));
        } catch (Exception exce) {
          throw new BusinessException(ErrorsCode.BUSINESS_INCORRECT_DATE);
        }

        this.handleResponse(resp, jeUcc.getJeByYear(year));
        return;
      case "/je/create":
        JeDto je = this.dtoFactory.getCompanyDay();
        try {
          je.setDate(req.getParameter("date"));
        } catch (Exception exce) {
          System.out.println(exce.getMessage());
          throw new BusinessException(ErrorsCode.BUSINESS_INVALID_DATE_FORMAT);
        }
        jeUcc.createNewJe(je);

        this.handleResponse(resp, true);
        return;
      case "/noJe":
        /*
         * Check if ther is a JE for this year return true or false
         */
        Calendar cal = new GregorianCalendar();
        cal.setTime(new Date());
        jeUcc.getJeByYear(cal.get(Calendar.YEAR));
        return;
      case "/je/list":
        /*
         * Return all the years of previous JE
         */
        this.handleResponse(resp, jeUcc.getAllJe());
        return;
      case "/je/previous":
        /*
         * Return all the years of previous JE
         */
        this.handleResponse(resp, jeUcc.getPreviousJe());
        return;
      case "/entreprise/create":
        Logger.log("ApplicationServlet", "/entreprise/create", "Creating company");
        CompanyDto companyDto = this.dtoFactory.getCompany();
        try {
          Map<String, Object> requestMap =
              (Map<String, Object>) servletUtil.decode(req.getParameter("json"), Map.class);
          if (null == requestMap) {
            throw new BusinessException(ErrorsCode.BUSINESS_ERROR_DECODING_JSON);
          }

          AddressDto addressDto =
              servletUtil.fillAddressDto(this.dtoFactory.getAddress(), requestMap);
          if (!this.addressUcc.register(addressDto)) {
            return;
          }
          UserDto user = userUcc.getUserByLogin(connectedUser.getLogin());
          companyDto = servletUtil.fillCompanyDto(companyDto, requestMap, user, addressDto);
        } catch (Exception exc) {
          exc.printStackTrace();
          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        }
        this.handleResponse(resp, this.companyUcc.register(companyDto));
        break;
      case "/entreprise/list":
        /*
         * return all the entreprises
         */
        this.handleResponse(resp, this.companyUcc.getAllCompanies());
        break;
      case "/entreprise/update":
        /*
         * Update the contact in the datatable
         */
        this.handleResponse(resp, true);
        break;
      case "/contact/create":
        Logger.log("ApplicationServlet", "/contact/create", "Creating contact");
        ContactDto contactDto = this.dtoFactory.getContact();
        try {
          Map<String, Object> requestMap =
              (Map<String, Object>) servletUtil.decode(req.getParameter("json"), Map.class);
          if (null == requestMap) {
            throw new BusinessException(ErrorsCode.BUSINESS_ERROR_DECODING_JSON);
          }
          contactDto = servletUtil.fillContactDto(requestMap, contactDto, this.companyUcc);
        } catch (Exception exc) {
          exc.printStackTrace();
          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        }
        this.handleResponse(resp, this.contactUcc.createNewContact(contactDto));
        // this.handleResponse(resp, true);
        break;
      case "/contact/list":
        /*
         * Return all the contact
         */
        this.handleResponse(resp, this.contactUcc.getAllContact());
        break;
      case "/contact/listForCompany":
        /*
         * List all the contacts for a given company
         */
        String name = req.getParameter("entreprise").toString();
        this.handleResponse(resp,
            this.contactUcc.getContactsForCompany(name));
        break;
      case "/contact/update":
        /*
         * Update the contact in the datatable
         */
        Logger.log("ApplicationServlet", "/contact/update", "Updating contact");
        ContactDto contact = this.dtoFactory.getContact();
        try {
          Map<String, Object> requestMap =
              (Map<String, Object>) servletUtil.decode(req.getParameter("json"), Map.class);
          if (null == requestMap) {
            throw new BusinessException(ErrorsCode.BUSINESS_ERROR_DECODING_JSON);
          }
          contact = servletUtil.fillContactDto(requestMap, contact, this.companyUcc);
        } catch (Exception exc) {
          exc.printStackTrace();
          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        }
        this.handleResponse(resp, this.contactUcc.update(contact));
        break;
      default:
        break;
    }

    this.handleResponse(resp, "Page not found", 404);

  }


  /**
   * Handle the GET HTTP request, serves static files.
   *
   * @param req request object
   * @param resp response object
   */
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    if (req.getPathInfo().equals("/")) {
      this.templateLoader.load(resp);

      return;
    }

    Pattern pattern = Pattern.compile("^/assets/(css|js|html)/(.*)$");
    Matcher matcher = pattern.matcher(req.getPathInfo());

    if (!matcher.find()) {
      resp.sendError(404);

      return;
    }

    this.resourcesLoader.load(resp, matcher.group(1), matcher.group(2));
  }


  /**
   * In case of business exception, render a JSON response "{ error : message }".
   */
  @Override
  protected void service(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    try {
      super.service(req, resp);
    } catch (BusinessException bexc) {
      Integer errCode = bexc.getErrorCode();

      Logger.log("ApplicationServlet", "service",
          "Business Exception with code => " + errCode + " \tin "
              + bexc.getStackTrace()[0].getFileName() + ":"
              + bexc.getStackTrace()[0].getLineNumber());

      resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
      resp.setContentType("application/json");
      resp.getWriter().write(errCode.toString());
    }
  }

  /**
   * Send a response to back-end.
   *
   * @param resp response object
   * @param data the data to send to front-end
   * @param code page status code (200, 404, etc)
   */
  private void handleResponse(HttpServletResponse resp, Object data, int code) {
    try {
      String str = servletUtil.encode(data);
      byte[] bytes = str.getBytes(Charset.forName("UTF-8"));

      resp.setContentLength(bytes.length);
      resp.setContentType("application/javascript");
      resp.getOutputStream().write(bytes);
      resp.setStatus(code);
    } catch (IOException exception) {
      try {
        resp.sendError(500);
      } catch (IOException ioe) {
        Logger.log("ApplicationServlet", "handleResponse", "Internal error");
      }
    }
  }

  /**
   * Default status code is 200.
   */
  private void handleResponse(HttpServletResponse resp, Object data) {
    handleResponse(resp, data, 200);
  }


  /**
   * Throws a BusinessException if there is no session or cookie.
   *
   * @param req request
   */
  private void checkConnection(HttpServletRequest req, UserDto userDto) {
    if (userDto == null) {
      throw new BusinessErrorException(ErrorsCode.HTTP_ERROR_UNAUTHORIZED);
    }
  }


}
