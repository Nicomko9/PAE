package ihm;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import biz.CompanyUcc;
import biz.DtoFactory;
import biz.JeUcc;
import biz.UserUcc;
import biz.dto.AddressDto;
import biz.dto.CompanyDto;
import biz.dto.JeDto;
import biz.dto.UserDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import ihm.utils.JsonUtil;
import ihm.utils.Logger;


/**
 * Unique Servlet of the application.
 */
public class ApplicationServlet extends HttpServlet {


  private static final long serialVersionUID = 1L;

  /**
   * Json encoding / decoding by shared service.
   */
  private transient JsonUtil jsonUtil;

  /**
   * User's session utility.
   */
  private transient SessionManager userSessions;

  /**
   * Business object's factory.
   */
  private DtoFactory dtoFactory;

  /**
   * User Use-Case Controller.
   */
  private UserUcc userUcc;

  /**
   * Je Use-Case Controller.
   */
  private JeUcc jeUcc;

  /**
   * Company Use-Case Controller.
   */
  private CompanyUcc companyUcc;

  /**
   * Construct the servlet.
   *
   * @param dtoFactory Business Object's factory
   * @param userSessions Manager of user's session
   * @param userUcc User Use-Case Controller
   */
  ApplicationServlet(DtoFactory dtoFactory, SessionManager userSessions, JsonUtil jsonUtil,
      UserUcc userUcc, JeUcc jeUcc, CompanyUcc companyUcc) {
    this.dtoFactory = dtoFactory;
    this.userSessions = userSessions;
    this.jsonUtil = jsonUtil;

    this.userUcc = userUcc;
    this.jeUcc = jeUcc;
    this.companyUcc = companyUcc;
  }

  /**
   * Handle the POST Http request.
   *
   * @param req request object
   * @param resp response object
   * @throws BusinessException Already connected
   * @throws BusinessException Internal JSON decoding error
   */

  @SuppressWarnings("unchecked")
  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws BusinessException {
    UserDto userDto;
    UserDto connectedUser = userSessions.readSession(req);

    switch (req.getPathInfo()) {
      case "/connection":
        Logger.log("ApplicationServlet", "doPost", "Connection");
        if (null != connectedUser) {
          throw new BusinessException(ErrorsCode.BUSINESS_USER_ALREADY_LOGGED_IN);
        }
        userDto = this.userUcc.connect(req.getParameter("login"), req.getParameter("password"));
        this.handleResponse(resp, userSessions.createSession(req, resp, userDto));
        return;

      case "/signup":
        Logger.log("ApplicationServlet", "doPost", "Sign up");
        try {
          Map<String, Object> requestMap =
              (Map<String, Object>) jsonUtil.decode(req.getParameter("json"), Map.class);
          if (null == requestMap) {
            throw new BusinessException(ErrorsCode.BUSINESS_ERROR_DECODING_JSON);
          }
          userDto = this.dtoFactory.getUser();
          userDto.setLogin((String) requestMap.get("login"));
          userDto.setFirstname((String) requestMap.get("firstname"));
          userDto.setLastname((String) requestMap.get("lastname"));
          userDto.setEmail((String) requestMap.get("email"));
          userDto.setPassword((String) requestMap.get("password"));
        } catch (Exception exc) {
          System.out.println(exc.getMessage());
          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        }
        if (this.userUcc.subscribe(userDto)) {
          this.handleResponse(resp, userSessions.createSession(req, resp, userDto));
        }
        return;

      case "/disconnect":
        Logger.log("ApplicationServlet", "doPost", "Disconnect");
        userSessions.deleteSession(req, resp);
        this.handleResponse(resp, true);
        return;
      default:
        break;
    }

    checkConnection(req, connectedUser);

    switch (req.getPathInfo()) {
      case "/auth":
        this.handleResponse(resp, connectedUser);
        return;
      case "/je":
        int year;
        try {
          year = Integer.parseInt(req.getParameter("year"));
        } catch (Exception exce) {
          throw new BusinessException(ErrorsCode.BUSINESS_INCORRECT_DATE);
        }

        this.handleResponse(resp, jeUcc.getJeByYear(year));
        return;
      case "/je/create":
        JeDto je = this.dtoFactory.getCompanyDay();
        try {
          je.setDate(req.getParameter("date"));
        } catch (Exception exce) {
          System.out.println(exce.getMessage());
          throw new BusinessException(ErrorsCode.BUSINESS_INVALID_DATE_FORMAT);
        }
        jeUcc.createNewJe(je);

        this.handleResponse(resp, true);
        return;
      case "/noJe":
        /*
         * Check if ther is a JE for this year return true or false
         */
        Calendar cal = new GregorianCalendar();
        cal.setTime(new Date());
        jeUcc.getJeByYear(cal.get(Calendar.YEAR));
        return;
      case "/je/list":
        /*
         * Return all the years of previous JE
         */
        this.handleResponse(resp, jeUcc.getAllJe());
        return;
      case "/je/previous":
        /*
         * Return all the years of previous JE
         */
        this.handleResponse(resp, jeUcc.getPreviousJe());
        return;
      case "/entreprise/create":
        Logger.log("ApplicationServlet", "/entreprise/create", "Creating entreprise");
        CompanyDto comp = this.dtoFactory.getCompany();
        try {
          Map<String, Object> requestMap =
              (Map<String, Object>) jsonUtil.decode(req.getParameter("json"), Map.class);
          if (null == requestMap) {
            throw new BusinessException(ErrorsCode.BUSINESS_ERROR_DECODING_JSON);
          }
          comp.setCompanyName((String) requestMap.get("name"));
          // TODO -> comp.setCreator(creator);
          // SetDate in CompanyDao
          // TODO -> Adresse
          AddressDto addresseComp = this.dtoFactory.getAddress();
          // vÃ©rifier qu'il n'est pas vide
          if (requestMap.get("box") != null) {
            addresseComp.setBox(Integer.parseInt((String) requestMap.get("box")));
          } else {
            addresseComp.setBox(0);
          }
          addresseComp.setStreet((String) requestMap.get("street"));
          addresseComp.setStreetNumber(Integer.parseInt((String) requestMap.get("number")));
          addresseComp.setZipCode(Integer.parseInt((String) requestMap.get("postal-code")));
          addresseComp.setCommune((String) requestMap.get("city"));
          comp.setAddress(addresseComp);
        } catch (Exception exce) {
          exce.printStackTrace();
          throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
        }
        this.handleResponse(resp, this.companyUcc.register(comp));
        break;
      default:
        break;
    }
    this.handleResponse(resp, "Page not found", 404);
  }

  /**
   * In case of business exception, render a JSON response "{ error : message }".
   */
  @Override
  protected void service(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    try {
      super.service(req, resp);
    } catch (BusinessException bexc) {
      Integer errCode = bexc.getErrorCode();

      Logger.log("ApplicationServlet", "service",
          "Business Exception with code => " + errCode + " \tin "
              + bexc.getStackTrace()[0].getFileName() + ":"
              + bexc.getStackTrace()[0].getLineNumber());

      resp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
      resp.setContentType("application/json");
      resp.getWriter().write(errCode.toString());
    }
  }

  /**
   * Send a response to back-end.
   *
   * @param resp response object
   * @param data the data to send to front-end
   * @param code page status code (200, 404, etc)
   */
  private void handleResponse(HttpServletResponse resp, Object data, int code) {
    try {
      String str = jsonUtil.encode(data);
      byte[] bytes = str.getBytes(Charset.forName("UTF-8"));

      resp.setContentLength(bytes.length);
      resp.setContentType("application/javascript");
      resp.getOutputStream().write(bytes);
      resp.setStatus(code);
    } catch (IOException exception) {
      try {
        resp.sendError(500);
      } catch (IOException ioe) {
        Logger.log("ApplicationServlet", "handleResponse", "Internal error");
      }
    }
  }

  /**
   * Default status code is 200.
   */
  private void handleResponse(HttpServletResponse resp, Object data) {
    handleResponse(resp, data, 200);
  }


  /**
   * Throws a BusinessException if there is no session or cookie.
   *
   * @param req request
   */
  private void checkConnection(HttpServletRequest req, UserDto userDto) {
    if (userDto == null) {
      throw new BusinessErrorException(ErrorsCode.HTTP_ERROR_UNAUTHORIZED);
    }
  }


}
