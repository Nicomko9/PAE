package biz;

import biz.dto.UserDto;
import biz.exceptions.BusinessErrorException;
import biz.exceptions.BusinessException;
import biz.exceptions.ErrorsCode;
import biz.objects.User;
import dal.DalFrontEndServices;
import dal.dao.UserDao;
import ihm.utils.DataValidator;
import ihm.utils.Logger;

/**
 * Implementation of the User's Use Case Controller.
 */
class UserUccImpl implements UserUcc {

  private DalFrontEndServices dal;

  private UserDao userDao;

  UserUccImpl(DalFrontEndServices dal, UserDao userDao) {
    this.dal = dal;
    this.userDao = userDao;
  }

  /**
   * Start a connection.
   *
   * @param login login of the user to connect
   * @param password password of the user to connect
   * @return the information of the user in the Database.
   */
  public UserDto connect(String login, String password) {

    if (!DataValidator.validateString(login) || !DataValidator.validateString(password)) {
      throw new BusinessException(ErrorsCode.HTTP_ERROR_BAD_REQUEST);
    }

    User user = (User) this.userDao.findByLogin(login);

    if (user == null) {
      Logger.log("UserUccImpl", "connect", "connection from unknown login failed");
      throw new BusinessException(ErrorsCode.BUSINESS_INVALID_CREDENTIALS);
    }
    if (!user.comparePassword(password)) {
      Logger.log("UserUccImpl", "connect", "connection from " + login + " failed");
      throw new BusinessException(ErrorsCode.BUSINESS_INVALID_CREDENTIALS);
    }
    Logger.log("UserUccImpl", "connect", "connection from " + login);
    return user;
  }

  /**
   * Register a new user into the Database.
   *
   * @param userDto the user to persist
   * @return a boolean to indicate whether or not it worked.
   */
  @Override
  public boolean subscribe(UserDto userDto) {
    User user = (User) userDto;

    if (null != this.userDao.findByLogin(user.getLogin())) {
      Logger.log("UserUccImpl", "subscribe", user.getLogin() + " exists already");
      throw new BusinessException(ErrorsCode.BUSINESS_LOGIN_USER_EXISTED);
    } else if (null != this.userDao.findByEmail(user.getEmail())) {
      Logger.log("UserUccImpl", "subscribe", user.getEmail() + " exists already");
      throw new BusinessException(ErrorsCode.BUSINESS_EMAIL_USER_EXISTED);
    }

    user.prepareForInsert();

    try {
      this.dal.startTransaction();

      if (null == this.userDao.create(user)) {
        throw new BusinessErrorException(ErrorsCode.INTERNAL_UNKNOWN_ERROR);
      }

      this.dal.commitTransaction();
      Logger.log("UserUccImpl", "subscribe", "registration from " + user.getLogin());
      return true;
    } catch (Exception exc) {
      this.dal.rollbackTransaction();

      throw exc;
    }
  }

  /**
   * Get a User by his login.
   * 
   * @param login of the User
   * @return {@link UserDto} that fits the good login
   */
  public UserDto getUserByLogin(String login) {
    if (!DataValidator.validateString(login)) {
      throw new BusinessException(ErrorsCode.HTTP_ERROR_BAD_REQUEST);
    }

    return this.userDao.findByLogin(login);
  }

}
