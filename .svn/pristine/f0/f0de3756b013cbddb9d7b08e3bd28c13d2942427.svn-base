package biz.ucc;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;

import java.time.LocalDate;

import org.junit.BeforeClass;
import org.junit.Test;

import biz.ParticipationUcc;
import biz.exceptions.BusinessException;
import biz.objects.Company;
import biz.objects.Je;
import biz.objects.Participation;
import config.AppConfig;
import mock.DataBaseMock;

public class ParticipationUccImplTest {

  private static AppConfig appConfig;
  private static ParticipationUcc participationUcc;
  private static Participation participation;
  private static Je je;
  private static Company company; 
//  private static Address address;
//  private static User creator;
//  private static int pkAddress, pkCreator, pkCompany;
  
  @BeforeClass
  public static void setUpBeforeClass() throws Exception {
    appConfig = new AppConfig(AppConfig.APP_MOCK_DAO);
    if(!appConfig.load())
      throw new Exception();
    participationUcc = appConfig.newInstanceOf(ParticipationUcc.class);
    
//    address = createAddress(appConfig);
//    pkAddress = address.getPk();
    
//    creator = createUser(appConfig);
//    pkCreator = creator.getPk();
    
//    company = createCompany(appConfig, address, creator);
//    pkCompany = company.getPk();
    
//    je = createJe(appConfig);
    
//    participation = createParticipation(appConfig, company, je, "facturée", "payée");
    DataBaseMock dataBaseMock = DataBaseMock.getInstance();
    participation = (Participation) dataBaseMock.getParticipationByYear(LocalDate.now()
        .minusYears(1).getYear()).get(0);
    company = (Company) participation.getCompany();
    je = (Je) participation.getJe();
  }

//  @AfterClass
//  public static void tearDownAfterClass() throws Exception {
//    deleteTestRecord(appConfig);
//  }

//  @Before
//  public void setUp() throws Exception {
//    fillAddress(address, BOX, COMMUNE, pkAddress, STREET, STREET_NUMBER, ZIP_CODE);
//    fillUser(creator, EMAIL, FIRSTNAME, LASTNAME, LOGIN, PASSWORD, pkCreator);
//    fillCompany(company, address, COMPANY_NAME, creator, pkCompany);
//  }

  @Test (expected = BusinessException.class)
  public void testInvite() {
    participationUcc.invite(participation);
  }

  @Test (expected = BusinessException.class)
  public void testConfirm() {
    participationUcc.confirm(participation);
  }

  @Test (expected = BusinessException.class)
  public void testRefuse() {
    participationUcc.refuse(participation);
  }

  @Test (expected = BusinessException.class)
  public void testInvoice() {
    participationUcc.invoice(participation);
  }

  @Test
  public void testPay() {
    participationUcc.pay(participation);
  }

  @Test
  public void testCancel() {
    assertNotNull(participationUcc.cancel(participation));
  }

  @Test
  public void testGetAllParticipationsOfJeDto() {
    assertFalse(participationUcc.getAllParticipationsOf(je).isEmpty());
  }

  @Test
  public void testGetAllParticipationsOfCompanyDto() {
    assertFalse(participationUcc.getAllParticipationsOf(company).isEmpty());
  }

}
